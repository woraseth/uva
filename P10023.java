// 10023 Square root 
// I google for efficient algorithm for finding sq root of integer
// n < 1e1001
// run in 0.492 sec

import java.math.BigInteger;
import java.util.Scanner;


public class Main {

  static Scanner sc = new Scanner(System.in);

  public static void main(String[] args) {
    int question = sc.nextInt();
    for (int q = 0; q < question; q++) {
      if (q != 0) {
        System.out.println();
      }
      System.out.println(squareRoot(new BigInteger(sc.next())));
    }
//    System.out.println(squareRoot(new BigInteger("15241578753238836750495351562536198787501905199875019052100")));
  }

// adapted from Craig McQueen
// http://stackoverflow.com/questions/1100090/looking-for-an-efficient-integer-square-root-algorithm-for-arm-thumb2
  static BigInteger squareRoot(BigInteger n) {
    // 2^3326 1.68e1001
    BigInteger one = new BigInteger("168176603962381340918015427647687149520019508994182632927550715542453580036510366487291806711403766776751106920586593035266463417725272310651053840336868754528559751951373683520532922989184107912677977537317622321322733839674477448429939487858790174416000418984555526171171406152419532115228171260293825031118248230409060630608176502154823289411709075601361306373966742264943511847513983755485925944012566382701683263727854539413403973954971270778044325157470827483279263653659356226209764781391862877686328552072787262080720927509359297103550677115225508062642964810158384319185352647851913321913156605559357476340380847160754366269147091888183596882307997123162984325269238345013182236088921688964045055136208052648196845395005747230482831775905813383931073200568949882874086446691586673682275028402392171820999694278524046798692910632007566189342680878000505287399997838504719351563271751902459545112581260326376669864068884434954257524763253675096357514272970195303360467720543872758308407412260864");
    BigInteger res = BigInteger.ZERO;
    while (one.compareTo(n) > 0) {
      one = one.shiftRight(2);
    }

    while (!one.equals(BigInteger.ZERO)) {
//      System.out.println(".");
      BigInteger resPlusOne = res.add(one);
      if (n.compareTo(resPlusOne) >= 0) {
        n = n.subtract(resPlusOne);
        res = res.add(one.shiftLeft(1));
      }
      res = res.shiftRight(1);
      one = one.shiftRight(2);
    }
    return res;
  }
}
